//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Git\CE305\Assignment\Grammar\Language.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Assignment.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	public const int
		T__0=1, NUM=2, PLUS=3, MINUS=4, MULT=5, DIV=6, LPARA=7, RPARA=8, AssignOP=9, 
		EndOfLine=10, VAR=11, INTERGER=12, DECIMAL=13, VARIABLEKEYWORD=14, WS=15;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "NUM", "PLUS", "MINUS", "MULT", "DIV", "LPARA", "RPARA", "AssignOP", 
		"EndOfLine", "VAR", "INTERGER", "DECIMAL", "VARIABLEKEYWORD", "WS"
	};


	public LanguageLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'as'", null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", "':='", 
		"';'", null, "'INTEGER'", "'DECIMAL'", "'VARIABLE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NUM", "PLUS", "MINUS", "MULT", "DIV", "LPARA", "RPARA", "AssignOP", 
		"EndOfLine", "VAR", "INTERGER", "DECIMAL", "VARIABLEKEYWORD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x11o\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x3\x2\x3\x2\x3\x2\x3\x3\x6\x3&\n\x3\r\x3\xE\x3\'\x3\x3\x3\x3\x6"+
		"\x3,\n\x3\r\x3\xE\x3-\x5\x3\x30\n\x3\x3\x3\x3\x3\x5\x3\x34\n\x3\x3\x3"+
		"\x6\x3\x37\n\x3\r\x3\xE\x3\x38\x5\x3;\n\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f"+
		"\x6\fO\n\f\r\f\xE\fP\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x2\x2\x2\x11\x3\x2"+
		"\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11\x3\x2\x6\x3\x2"+
		"\x32;\x4\x2GGgg\x4\x2--//\x5\x2\v\f\xF\xF\"\"u\x2\x3\x3\x2\x2\x2\x2\x5"+
		"\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x3!\x3\x2\x2\x2\x5%\x3\x2\x2\x2"+
		"\a<\x3\x2\x2\x2\t>\x3\x2\x2\x2\v@\x3\x2\x2\x2\r\x42\x3\x2\x2\x2\xF\x44"+
		"\x3\x2\x2\x2\x11\x46\x3\x2\x2\x2\x13H\x3\x2\x2\x2\x15K\x3\x2\x2\x2\x17"+
		"N\x3\x2\x2\x2\x19R\x3\x2\x2\x2\x1BZ\x3\x2\x2\x2\x1D\x62\x3\x2\x2\x2\x1F"+
		"k\x3\x2\x2\x2!\"\a\x63\x2\x2\"#\au\x2\x2#\x4\x3\x2\x2\x2$&\t\x2\x2\x2"+
		"%$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2(/\x3\x2\x2"+
		"\x2)+\a\x30\x2\x2*,\t\x2\x2\x2+*\x3\x2\x2\x2,-\x3\x2\x2\x2-+\x3\x2\x2"+
		"\x2-.\x3\x2\x2\x2.\x30\x3\x2\x2\x2/)\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		":\x3\x2\x2\x2\x31\x33\t\x3\x2\x2\x32\x34\t\x4\x2\x2\x33\x32\x3\x2\x2\x2"+
		"\x33\x34\x3\x2\x2\x2\x34\x36\x3\x2\x2\x2\x35\x37\t\x2\x2\x2\x36\x35\x3"+
		"\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2"+
		"\x39;\x3\x2\x2\x2:\x31\x3\x2\x2\x2:;\x3\x2\x2\x2;\x6\x3\x2\x2\x2<=\a-"+
		"\x2\x2=\b\x3\x2\x2\x2>?\a/\x2\x2?\n\x3\x2\x2\x2@\x41\a,\x2\x2\x41\f\x3"+
		"\x2\x2\x2\x42\x43\a\x31\x2\x2\x43\xE\x3\x2\x2\x2\x44\x45\a*\x2\x2\x45"+
		"\x10\x3\x2\x2\x2\x46G\a+\x2\x2G\x12\x3\x2\x2\x2HI\a<\x2\x2IJ\a?\x2\x2"+
		"J\x14\x3\x2\x2\x2KL\a=\x2\x2L\x16\x3\x2\x2\x2MO\x4\x63|\x2NM\x3\x2\x2"+
		"\x2OP\x3\x2\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2Q\x18\x3\x2\x2\x2RS\aK\x2"+
		"\x2ST\aP\x2\x2TU\aV\x2\x2UV\aG\x2\x2VW\aI\x2\x2WX\aG\x2\x2XY\aT\x2\x2"+
		"Y\x1A\x3\x2\x2\x2Z[\a\x46\x2\x2[\\\aG\x2\x2\\]\a\x45\x2\x2]^\aK\x2\x2"+
		"^_\aO\x2\x2_`\a\x43\x2\x2`\x61\aN\x2\x2\x61\x1C\x3\x2\x2\x2\x62\x63\a"+
		"X\x2\x2\x63\x64\a\x43\x2\x2\x64\x65\aT\x2\x2\x65\x66\aK\x2\x2\x66g\a\x43"+
		"\x2\x2gh\a\x44\x2\x2hi\aN\x2\x2ij\aG\x2\x2j\x1E\x3\x2\x2\x2kl\t\x5\x2"+
		"\x2lm\x3\x2\x2\x2mn\b\x10\x2\x2n \x3\x2\x2\x2\n\x2\'-/\x33\x38:P\x3\x2"+
		"\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Assignment.Grammar
