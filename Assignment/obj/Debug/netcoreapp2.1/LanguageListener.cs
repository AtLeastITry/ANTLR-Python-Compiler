//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Git\CE305\Assignment\Grammar\Language.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Assignment.Grammar {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>assignmentExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpr([NotNull] LanguageParser.AssignmentExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignmentExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpr([NotNull] LanguageParser.AssignmentExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>infixExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInfixExpr([NotNull] LanguageParser.InfixExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>infixExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInfixExpr([NotNull] LanguageParser.InfixExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>unaryExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpr([NotNull] LanguageParser.UnaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpr([NotNull] LanguageParser.UnaryExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>funcExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncExpr([NotNull] LanguageParser.FuncExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funcExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncExpr([NotNull] LanguageParser.FuncExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>valueExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValueExpr([NotNull] LanguageParser.ValueExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>valueExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValueExpr([NotNull] LanguageParser.ValueExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParensExpr([NotNull] LanguageParser.ParensExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParensExpr([NotNull] LanguageParser.ParensExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompileUnit([NotNull] LanguageParser.CompileUnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.compileUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompileUnit([NotNull] LanguageParser.CompileUnitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] LanguageParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] LanguageParser.ExprContext context);
}
} // namespace Assignment.Grammar
