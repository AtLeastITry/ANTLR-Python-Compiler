//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Git\CE305\Assignment\Grammar\Language.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Assignment.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LanguageParser : Parser {
	public const int
		T__0=1, NUM=2, PLUS=3, MINUS=4, MULT=5, DIV=6, LPARA=7, RPARA=8, AssignOP=9, 
		EndOfLine=10, VAR=11, INTERGER=12, DECIMAL=13, VARIABLEKEYWORD=14, WS=15, 
		Identifier=16, ID=17;
	public const int
		RULE_compileUnit = 0, RULE_identifier = 1, RULE_expr = 2;
	public static readonly string[] ruleNames = {
		"compileUnit", "identifier", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'as'", null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", "':='", 
		"';'", null, "'INTEGER'", "'DECIMAL'", "'VARIABLE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NUM", "PLUS", "MINUS", "MULT", "DIV", "LPARA", "RPARA", "AssignOP", 
		"EndOfLine", "VAR", "INTERGER", "DECIMAL", "VARIABLEKEYWORD", "WS", "Identifier", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LanguageParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(LanguageParser.Eof, 0); }
		public ITerminalNode[] EndOfLine() { return GetTokens(LanguageParser.EndOfLine); }
		public ITerminalNode EndOfLine(int i) {
			return GetToken(LanguageParser.EndOfLine, i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; expr(0);
			State = 11;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==EndOfLine) {
				{
				{
				State = 7; Match(EndOfLine);
				State = 8; expr(0);
				}
				}
				State = 13;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 14; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(LanguageParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << INTERGER) | (1L << DECIMAL) | (1L << VARIABLEKEYWORD) | (1L << Identifier))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentExprContext : ExprContext {
		public IToken variable;
		public IToken op;
		public ExprContext right;
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode AssignOP() { return GetToken(LanguageParser.AssignOP, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfixExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(LanguageParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(LanguageParser.DIV, 0); }
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public InfixExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfixExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(LanguageParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(LanguageParser.MINUS, 0); }
		public UnaryExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExprContext : ExprContext {
		public IToken func;
		public ITerminalNode LPARA() { return GetToken(LanguageParser.LPARA, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPARA() { return GetToken(LanguageParser.RPARA, 0); }
		public ITerminalNode ID() { return GetToken(LanguageParser.ID, 0); }
		public FuncExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterFuncExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitFuncExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExprContext : ExprContext {
		public IToken value;
		public ITerminalNode NUM() { return GetToken(LanguageParser.NUM, 0); }
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ValueExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterValueExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitValueExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationExprContext : ExprContext {
		public IToken name;
		public IToken type;
		public ITerminalNode VARIABLEKEYWORD() { return GetToken(LanguageParser.VARIABLEKEYWORD, 0); }
		public ITerminalNode VAR() { return GetToken(LanguageParser.VAR, 0); }
		public ITerminalNode INTERGER() { return GetToken(LanguageParser.INTERGER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(LanguageParser.DECIMAL, 0); }
		public VariableDeclarationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensExprContext : ExprContext {
		public ITerminalNode LPARA() { return GetToken(LanguageParser.LPARA, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPARA() { return GetToken(LanguageParser.RPARA, 0); }
		public ParensExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.EnterParensExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILanguageListener typedListener = listener as ILanguageListener;
			if (typedListener != null) typedListener.ExitParensExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILanguageVisitor<TResult> typedVisitor = visitor as ILanguageVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParensExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				_localctx = new ParensExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 19; Match(LPARA);
				State = 20; expr(0);
				State = 21; Match(RPARA);
				}
				break;

			case 2:
				{
				_localctx = new UnaryExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 23;
				((UnaryExprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((UnaryExprContext)_localctx).op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 24; expr(7);
				}
				break;

			case 3:
				{
				_localctx = new AssignmentExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 25; ((AssignmentExprContext)_localctx).variable = Match(VAR);
				State = 26; ((AssignmentExprContext)_localctx).op = Match(AssignOP);
				State = 27; ((AssignmentExprContext)_localctx).right = expr(4);
				}
				break;

			case 4:
				{
				_localctx = new FuncExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 28; ((FuncExprContext)_localctx).func = Match(ID);
				State = 29; Match(LPARA);
				State = 30; expr(0);
				State = 31; Match(RPARA);
				}
				break;

			case 5:
				{
				_localctx = new VariableDeclarationExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 33; Match(VARIABLEKEYWORD);
				State = 34; ((VariableDeclarationExprContext)_localctx).name = Match(VAR);
				State = 35; Match(T__0);
				State = 36;
				((VariableDeclarationExprContext)_localctx).type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==INTERGER || _la==DECIMAL) ) {
					((VariableDeclarationExprContext)_localctx).type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 6:
				{
				_localctx = new ValueExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 37;
				((ValueExprContext)_localctx).value = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==NUM || _la==VAR) ) {
					((ValueExprContext)_localctx).value = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 48;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 46;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
						((InfixExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 40;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 41;
						((InfixExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((InfixExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 42; ((InfixExprContext)_localctx).right = expr(7);
						}
						break;

					case 2:
						{
						_localctx = new InfixExprContext(new ExprContext(_parentctx, _parentState));
						((InfixExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 43;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 44;
						((InfixExprContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((InfixExprContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 45; ((InfixExprContext)_localctx).right = expr(6);
						}
						break;
					}
					} 
				}
				State = 50;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\x36\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\a\x2\f\n\x2\f\x2\xE\x2\xF"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x5\x4)\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x31\n\x4"+
		"\f\x4\xE\x4\x34\v\x4\x3\x4\x2\x2\x3\x6\x5\x2\x2\x4\x2\x6\x2\x2\a\x5\x2"+
		"\x3\x3\xE\x10\x12\x12\x3\x2\x5\x6\x3\x2\xE\xF\x4\x2\x4\x4\r\r\x3\x2\a"+
		"\b:\x2\b\x3\x2\x2\x2\x4\x12\x3\x2\x2\x2\x6(\x3\x2\x2\x2\b\r\x5\x6\x4\x2"+
		"\t\n\a\f\x2\x2\n\f\x5\x6\x4\x2\v\t\x3\x2\x2\x2\f\xF\x3\x2\x2\x2\r\v\x3"+
		"\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\x10\x3\x2\x2\x2\xF\r\x3\x2\x2\x2\x10\x11"+
		"\a\x2\x2\x3\x11\x3\x3\x2\x2\x2\x12\x13\t\x2\x2\x2\x13\x5\x3\x2\x2\x2\x14"+
		"\x15\b\x4\x1\x2\x15\x16\a\t\x2\x2\x16\x17\x5\x6\x4\x2\x17\x18\a\n\x2\x2"+
		"\x18)\x3\x2\x2\x2\x19\x1A\t\x3\x2\x2\x1A)\x5\x6\x4\t\x1B\x1C\a\r\x2\x2"+
		"\x1C\x1D\a\v\x2\x2\x1D)\x5\x6\x4\x6\x1E\x1F\a\x13\x2\x2\x1F \a\t\x2\x2"+
		" !\x5\x6\x4\x2!\"\a\n\x2\x2\")\x3\x2\x2\x2#$\a\x10\x2\x2$%\a\r\x2\x2%"+
		"&\a\x3\x2\x2&)\t\x4\x2\x2\')\t\x5\x2\x2(\x14\x3\x2\x2\x2(\x19\x3\x2\x2"+
		"\x2(\x1B\x3\x2\x2\x2(\x1E\x3\x2\x2\x2(#\x3\x2\x2\x2(\'\x3\x2\x2\x2)\x32"+
		"\x3\x2\x2\x2*+\f\b\x2\x2+,\t\x6\x2\x2,\x31\x5\x6\x4\t-.\f\a\x2\x2./\t"+
		"\x3\x2\x2/\x31\x5\x6\x4\b\x30*\x3\x2\x2\x2\x30-\x3\x2\x2\x2\x31\x34\x3"+
		"\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\a\x3\x2\x2\x2\x34"+
		"\x32\x3\x2\x2\x2\x6\r(\x30\x32";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Assignment.Grammar
